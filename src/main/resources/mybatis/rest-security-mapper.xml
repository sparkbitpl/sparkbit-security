<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--suppress SqlResolve -->
<mapper namespace="pl.sparkbit.security.rest.dao.mybatis.RestSecurityMapper">

    <insert id="insertCredentials">
        INSERT INTO ${prefix}_credentials (user_id, password, enabled, deleted,
        <foreach collection="authnAttributes" index="key" item="value" open="" separator=", " close="">${key}</foreach>
        ) VALUES (#{userId}, #{password}, #{enabled}, #{deleted},
        <foreach collection="authnAttributes" index="key" item="value" open="" separator=", " close="">#{value}</foreach>
        );
    </insert>

    <insert id="insertUserRole">
        INSERT INTO user_role (user_id, role) VALUES (#{userId}, #{role})
    </insert>

    <resultMap id="restUserDetailsResultMap" type="pl.sparkbit.security.rest.domain.RestUserDetails">
        <constructor>
            <idArg column="auth_token" javaType="String"/>
            <arg column="user_id" javaType="String"/>
        </constructor>
        <collection property="roles" ofType="org.springframework.security.core.authority.SimpleGrantedAuthority">
            <constructor>
                <arg column="role" javaType="string"/>
            </constructor>
        </collection>
    </resultMap>

    <select id="selectRestUserDetails" resultMap="restUserDetailsResultMap">
        SELECT s.auth_token as auth_token, s.${prefix}_id AS user_id, ur.role
        FROM ${prefix}_session s LEFT OUTER JOIN ${prefix}_role ur on s.${prefix}_id=ur.${prefix}_id
        WHERE s.auth_token=#{authToken} AND s.deleted_ts IS NULL
    </select>

    <select id="selectPasswordHashForUser" resultType="String">
        SELECT password from ${prefix}_credentials where ${prefix}_id=#{userId}
    </select>

    <update id="updatePassword">
        UPDATE ${prefix}_credentials SET password=#{password} where ${prefix}_id=#{userId}
    </update>

</mapper>
